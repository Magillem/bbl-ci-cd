node {
   def mvnHome
   stage('Preparation') {
      git 'https://github.com/Magillem/bbl-ci-cd.git'
      mvnHome = tool 'M3'
   }
   stage('workspace check') {
       location = pwd()
       echo "Current location is ${location}"
   }
   stage('Build') {
      if (isUnix()) {
         sh "cd demo/demo-rcp-tycho/com.mds.bbl.tycho; '${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('tests') {
       parallel RCPTT: {
            echo "starting RCPTT tests..."
       }, SWTBot: {
            echo "starting SWTBot tests"
       },
       failFast: false
   }
   stage('deploy') {
       parallel "Red Hat target": {
            echo "Deploying on the Red Hat test machine..."
       }, "Windows 10 target": {
            echo "Deploying on the Windows 10 test machine..."
       }, "Windows 7 target": {
            echo "Deploying on the Windows 7 test machine..."
       },
       failFast: false
   }
   stage('archive') {
       archiveArtifacts artifacts: 'demo/demo-rcp-tycho/com.mds.bbl.tycho/releng/com.mds.bbl.tycho.product/target/products/*.zip', onlyIfSuccessful: true
   }
   //add mvn sonar:sonar
   stage('Sonar') {
       def scannerHome = tool 'SonarQube Scanner 2.8';
       withSonarQubeEnv('SonarQube Server') {
         sh "${scannerHome}/bin/sonar-scanner"
       }
   }
}